#+STARTUP: indent contents
#+OPTIONS: toc:nil num:nil
* Chapter 2: A Simple Lisp Program
** 2.1: A Grammar for a Subset of English
Introduces the idea of /generative syntax/. The grammar being
discussed initially is:
#+BEGIN_EXAMPLE
  Sentence => Noun-Phrase + Verb-Phrase
  Noun-Phrase => Article + Noun
  Verb-Phrase => Verb + Noun-Phrase
  Article => the, a,...
  Noun => man, ball, woman, table...
  Verb => hit, took, saw, liked...
#+END_EXAMPLE
** 2.2: A Straightforward Solution
Here's Norvig's first implementation:
#+NAME: grammar
#+BEGIN_SRC lisp :results silent
  (defun sentence ()    (append (noun-phrase) (verb-phrase)))
  (defun noun-phrase () (append (Article) (Noun)))
  (defun verb-phrase () (append (Verb) (noun-phrase)))
  (defun Article ()     (one-of '(the a)))
  (defun Noun ()        (one-of '(man ball woman table)))
  (defun Verb ()        (one-of '(hit took saw liked)))
#+END_SRC

The grammar is constructed like most other representations: terminal
and non-terminal rules. Here the terminal rules are capitalized (NB:
CL doesn't care about case, this is only a convention for the reader)
and non-terminals are all lower case.

#+NAME: utility-functions
#+BEGIN_SRC lisp :results silent
  (defun one-of (set)
    "Pick one element of set, and make a list of it."
    (list (random-elt set)))

  (defun random-elt (choices)
    "Choose an element from a list at random."
    (elt choices (random (length choices))))
#+END_SRC
An example session:
#+BEGIN_SRC lisp
  CL-USER> (sentence)
  (THE WOMAN SAW A MAN)
  CL-USER> (sentence)
  (A BALL TOOK THE TABLE)
  CL-USER> (trace sentence noun-phrase verb-phrase Article Noun Verb)
  (SENTENCE NOUN-PHRASE VERB-PHRASE ARTICLE NOUN VERB)
  CL-USER> (sentence)
    0: (SENTENCE)
      1: (NOUN-PHRASE)
        2: (ARTICLE)
        2: ARTICLE returned (A)
        2: (NOUN)
        2: NOUN returned (BALL)
      1: NOUN-PHRASE returned (A BALL)
      1: (VERB-PHRASE)
        2: (VERB)
        2: VERB returned (HIT)
        2: (ARTICLE)
        2: ARTICLE returned (THE)
        2: (NOUN)
        2: NOUN returned (TABLE)
      1: VERB-PHRASE returned (HIT THE TABLE)
    0: SENTENCE returned (A BALL HIT THE TABLE)
  (A BALL HIT THE TABLE)
  CL-USER> 
#+END_SRC
=(random n)= will return a random integer in the range =[0,n)=.
Norvig points out that while this is an effective representation, it
is harder to read than the original. Then he demonstrates extending
the grammar with an indefinite number of adjectives and prepositional
phrases:
#+BEGIN_EXAMPLE
  Noun-Phrase => Article + Adj* + Noun + PP*
  Adj* => 0Ì¸, Adj + Adj*
  PP* => 0Ì¸, PP + PP*
  PP => Prep + Noun-Phrase
  Adj => big, little, blue, green, ...
  Prep => to, in, by, with, ...
#+END_EXAMPLE
He provides this implementation (NB: redefines =noun-phrase= from above):
#+BEGIN_SRC lisp :results silent
  (defun Adj* ()
    (if (= (random 2) 0)
        nil
        (append (Adj) (Adj*))))

  (defun PP* ()
    (if (random-elt '(t nil))
        (append (PP) (PP*))
        nil))

  (defun noun-phrase () (append (Article) (Adj*) (Noun) (PP*)))
  (defun PP () (append (Prep) (noun-phrase)))
  (defun Adj () (one-of '(big little blue green adiabatic)))
  (defun Prep () (one-of '(to in by with on)))
#+END_SRC
And an example execution.
#+BEGIN_EXAMPLE
  (THE ADIABATIC BLUE LITTLE BLUE MAN HIT A MAN)

  (THE TABLE ON A TABLE BY A WOMAN BY THE BLUE TABLE TO THE MAN IN A BLUE GREEN
       BALL ON THE TABLE BY A TABLE IN A WOMAN TO THE LITTLE TABLE ON A BALL IN
       THE MAN WITH THE WOMAN IN THE MAN WITH THE MAN BY THE TABLE WITH THE
       LITTLE BALL BY A GREEN BLUE MAN IN THE MAN IN A TABLE TO THE BLUE WOMAN IN
       A MAN IN A BIG BIG LITTLE MAN IN THE WOMAN ON A GREEN ADIABATIC WOMAN ON
       THE BIG BIG ADIABATIC MAN BY THE WOMAN TO A ADIABATIC BIG ADIABATIC TABLE
       IN THE TABLE WITH THE LITTLE TABLE ON THE MAN ON A TABLE WITH THE
       ADIABATIC MAN ON THE BLUE BIG GREEN LITTLE LITTLE GREEN MAN IN THE MAN IN
       A LITTLE MAN ON A MAN IN A GREEN TABLE WITH A WOMAN WITH THE WOMAN WITH A
       GREEN LITTLE GREEN WOMAN ON A MAN BY A BIG BALL BY THE TABLE IN THE TABLE
       BY A WOMAN TO THE GREEN BIG LITTLE TABLE IN A TABLE TO THE BIG GREEN BIG
       GREEN ADIABATIC BLUE MAN WITH THE MAN WITH THE ADIABATIC BALL TO A MAN
       WITH A MAN WITH THE WOMAN IN A WOMAN TO THE TABLE IN A BALL IN THE WOMAN
       WITH A BIG BIG ADIABATIC BALL IN THE TABLE BY A LITTLE BIG LITTLE BLUE
       BALL TO A LITTLE MAN WITH THE TABLE WITH THE BALL BY A WOMAN TO A TABLE ON
       THE TABLE TO A GREEN TABLE WITH A GREEN BIG BIG BALL TO A MAN WITH A BIG
       ADIABATIC BLUE BALL BY THE TABLE TO THE ADIABATIC WOMAN IN THE BIG WOMAN
       TOOK A WOMAN)
#+END_EXAMPLE
I like that second example.

This demonstrates a way to perform choice (Do we return nothing or
another adjective/prepositional phrase?) with recursion. He also has
an example that *won't* work because lisp uses eager execution. So
something like:
#+BEGIN_SRC lisp
  (defun Adj* ()
    "Warning - incorrect definition of Adjectives."
    (one-of (list nil (append (Adj) (Adj*)))))
#+END_SRC
would be a bad idea (infinite recursion). The call to =Adj*= would
repeat forever.

** 2.3: A Rule-Based Solution
Here he introduces the idea of using rules to describe the grammar,
which can be more flexible than coding up each grammar rule
independently.

#+NAME: grammar-rules
#+BEGIN_SRC lisp :results silent
  (defparameter *simple-grammar*
    '((sentence -> (noun-phrase verb-phrase))
      (noun-phrase -> (Article Noun))
      (verb-phrase -> (Verb noun-phrase))
      (Article -> the a)
      (Noun -> man ball woman table)
      (Verb -> hit took saw liked))
    "A grammar for a trivial subset of English.")

  (defvar *grammar* *simple-grammar*
    "The grammar used by generate.  Initially, this is
    ,*simple-grammar*, but we can switch to other grammars.")
#+END_SRC
Each term on the right hand side of the rule is an option that can be
selected by that rule. If the selected option is an atom (=hit=,
=man=) that's returned. Otherwise each item in the list is applied.

The =->= is used for clarity in making this seem more descriptive,
it's ignored by the implementation.

To select which rule needs to be applied he uses the built-in =assoc=
#+BEGIN_SRC lisp :exports both
  (assoc 'noun *grammar*)
#+END_SRC

#+RESULTS:
| NOUN | -> | MAN | BALL | WOMAN | TABLE |

It selects the element of the list whose first value matches the item
(=noun= in this case).

To make using the grammar rules easier, here's a simple interface:
#+NAME: rules-interface
#+BEGIN_SRC lisp :results silent
  (defun rule-lhs (rule)
    "The left hand side of a rule."
    (first rule))

  (defun rule-rhs (rule)
    "The right hand side of a rule."
    (rest (rest rule)))

  (defun rewrites (category)
    "Return a list of the possible rewrites for this category."
    (rule-rhs (assoc category *grammar*)))
#+END_SRC

#+BEGIN_SRC lisp :exports both
  (rewrites 'noun)
#+END_SRC

#+RESULTS:
| MAN | BALL | WOMAN | TABLE |

Using these grammar rules to generate a sentence requires recursing
over the structure. When it's a list, all the contained rules are
processed. If it's an atom a rewrite is attempted. If it's a
non-terminal then it'll return some result, otherwise it returns
nil. In that case the terminal value is returned inside a list.

#+NAME: generate
#+BEGIN_SRC lisp :results silent
  (defun generate (phrase)
    "Generate a random sentence or phrase"
    (cond ((listp phrase)
           (mappend #'generate phrase))
          ((rewrites phrase)
           (generate (random-elt (rewrites phrase))))
          (t (list phrase))))
#+END_SRC
#+BEGIN_SRC lisp :results silent :exports none
  (defun mappend (fn list)
    "Append the results of calling fn on each element of list.
    Like mapcon, but uses append instead of nconc."
    (apply #'append (mapcar fn list)))
#+END_SRC
#+BEGIN_SRC lisp :exports both
  (generate 'sentence)
#+END_SRC

#+RESULTS:
| A | TABLE | TOOK | THE | WOMAN |

#+BEGIN_SRC lisp :exports both
  (generate 'noun-phrase)
#+END_SRC

#+RESULTS:
| A | WOMAN |
*** Exercises
**** DONE 2.1
#+BEGIN_QUOTE
Exercise 2.1 [m] Write a version of generate that uses cond but avoids
calling rewrites twice.
#+END_QUOTE
Mine:
#+BEGIN_SRC lisp :results silent
  (defun grammar (phrase)
    (let ((non-terminal (rewrites phrase)))
      (cond ((listp phrase)
             (mappend #'generate phrase))
            (non-terminal
             (generate (random-elt non-terminal)))
            (t (list phrase)))))
#+END_SRC
Norvig's:
#+BEGIN_SRC lisp :results silent
  (defun grammar (phrase)
    (let ((choices nil))
      (cond ((listp phrase)
             (mappend #'generate phrase))
            ((setf choices (rewrites phrase))
             (generate (random-elt choices)))
            (t (list phrase)))))
#+END_SRC

The main difference is that he only computes =(rewrites phrase)= here
if =listp= returns nil. He also makes use of =setf= returning the
value assigned to =choices=.
**** DONE 2.2
#+BEGIN_QUOTE
Exercise 2.2 [m] Write a version of generate that explicitly
differentiates between terminal symbols (those with no rewrite rules)
and nonterminal symbols.
#+END_QUOTE
=(rewrites phrase)= returns nil if no lhs matches but a list otherwise, so a good test is
if it has a non-nil result or not.

#+BEGIN_SRC lisp :results silent
  (defun non-terminal-p (phrase)
    (not (null (rewrites phrase))))

  (defun grammar (phrase)
    (cond ((listp phrase)
           (mappend #'generate phrase))
          ((non-terminal-p phrase)
           (generate (random-elt (rewrites phrase))))
          (t (list phrase))))
#+END_SRC
** 2.5 Changing the Grammar without Changing the Program
Here is a demonstration of changing the behavior by only changing the
grammar rules (as opposed to having to reprogram it as in the first
version).
#+BEGIN_SRC lisp :results silent
  (defparameter *bigger-grammar*
    '((sentence -> (noun-phrase verb-phrase))
      (noun-phrase -> (Article Adj* Noun PP*) (Name) (Pronoun))
      (verb-phrase -> (Verb noun-phrase PP*))
      (PP* -> () (PP PP*))
      (Adj* -> () (Adj Adj*))
      (PP -> (Prep noun-phrase))
      (Prep -> to in by with on)
      (Adj -> big little blue green adiabatic)
      (Article -> the a)
      (Name -> Pat Kim Lee Terry Robin)
      (Noun -> man ball woman table)
      (Verb -> hit took saw liked)
      (Pronoun -> he she it these those that)))

  (setf *grammar* *bigger-grammar*)
#+END_SRC
#+BEGIN_SRC lisp :exports both
  (generate 'sentence)
#+END_SRC

#+RESULTS:
| A | BALL | TOOK | TERRY | BY | HE | ON | A | BLUE | TABLE | WITH | THE | TABLE | ON | TERRY |
** 2.6 Using the Same Data for Several Programs
By using a rules-based/data-driven approach it's easier to reuse the
grammar for other applications. Norvig demonstrates with a function
that generates the syntax tree, not just the sentence:
#+BEGIN_SRC lisp :results silent
  (defun generate-tree (phrase)
    "Generate a random sentence or phrase,
    with a complete parse tree."
    (cond ((listp phrase)
           (mapcar #'generate-tree phrase))
          ((rewrites phrase)
           (cons phrase
                 (generate-tree (random-elt (rewrites phrase)))))
          (t (list phrase))))
#+END_SRC
#+BEGIN_SRC lisp :exports both :results raw
  (generate-tree 'sentence)
#+END_SRC

#+RESULTS:
(SENTENCE
 (NOUN-PHRASE (ARTICLE THE) (ADJ* (ADJ GREEN) (ADJ*)) (NOUN TABLE)
              (PP* (PP (PREP TO) (NOUN-PHRASE (PRONOUN THAT))) (PP*)))
 (VERB-PHRASE (VERB HIT) (NOUN-PHRASE (PRONOUN SHE))
              (PP*
               (PP (PREP TO)
                   (NOUN-PHRASE (ARTICLE A) (ADJ*) (NOUN WOMAN)
                                (PP* (PP (PREP WITH) (NOUN-PHRASE (NAME PAT)))
                                     (PP*
                                      (PP (PREP TO) (NOUN-PHRASE (NAME PAT)))
                                      (PP*)))))
               (PP*))))
#+BEGIN_SRC lisp :results silent
  (defun generate-all (phrase)
    "Generate a list of all possible expansions of this phrase."
    (cond ((null phrase) (list nil))
          ((listp phrase)
           (combine-all (generate-all (first phrase))
                        (generate-all (rest phrase))))
          ((rewrites phrase)
           (mappend #'generate-all (rewrites phrase)))
          (t (list (list phrase)))))

  (defun combine-all (xlist ylist)
    "Return a list of lists formed by appending a y to an x.
    E.g., (combine-all '((a) (b)) '((1) (2)))
    -> ((A 1) (B 1) (A 2) (B 2))."
    (mappend #'(lambda (y)
                 (mapcar #'(lambda (x) (append x y)) xlist))
             ylist))
#+END_SRC

#+BEGIN_SRC lisp :exports both :results raw
  (generate-all 'Article)
#+END_SRC

#+RESULTS:
((THE) (A))

#+BEGIN_SRC lisp :exports both :results raw
  (setf *grammar* *simple-grammar*)
  (generate-all 'noun-phrase)
#+END_SRC

#+RESULTS:
((THE MAN) (A MAN) (THE BALL) (A BALL) (THE WOMAN) (A WOMAN) (THE TABLE)
 (A TABLE))

The bigger grammar can grow indefinitely so we had to switch to the
simple grammar.
** 2.7 Exercises
*** 2.3
#+BEGIN_QUOTE
Exercise 2.3 [h] Write a trivial grammar for some other language. This
can be a natural language other than English, or perhaps a subset of a
computer language.
#+END_QUOTE

I just went with a simple mathematical expression. I used =[= and =]=
because they can be used directly as symbols.
#+BEGIN_SRC lisp :results silent
  (defparameter *my-grammar*
    '((expr -> (term expr*))
      (expr* -> () (+ expr))
      (term -> (factor term*))
      (term* -> () (* term))
      (factor -> 1 2 3 4 5 6 7 8 9 0 ([ expr ]))))
#+END_SRC
#+BEGIN_SRC lisp :results raw :exports both
  (let ((*grammar* *my-grammar*))
    (generate 'expr))
#+END_SRC

#+RESULTS:
(5)
(3 + 3)
(5 * 7 * 5 + 0)
(3 * 4)
(7 + 3)
(2 + 8 * 0 + 0)
(8 * [ 7 ] * 4 * 2 + 2 * 4 * 0 * 4)
(2 * 3 * 5 * 4)
(1 + 3)
(1 + 8 * 2)
(2 + 0)
(4 * 2 * 2 * 4)
(5 * 3 * 6)
(0)
(9 + 9 * 9 * 5 + 1 * 9 + 8 * 2 + 9 * 7)
(1)
(0 + 5)
(8)
(9)
(5 * 4 * 3)
(8)
(3)
(2)
#+BEGIN_SRC lisp :results raw :expots both
  (let ((*grammar* *my-grammar*))
    (generate-tree 'expr))
#+END_SRC

#+RESULTS:
(EXPR
 (TERM (FACTOR 6)
  (TERM* (*)
   (TERM (FACTOR 4)
    (TERM* (*) (TERM (FACTOR 1) (TERM* (*) (TERM (FACTOR 0) (TERM*))))))))
 (EXPR* (+)
  (EXPR
   (TERM (FACTOR 0)
    (TERM* (*) (TERM (FACTOR 3) (TERM* (*) (TERM (FACTOR 6) (TERM*))))))
   (EXPR* (+)
    (EXPR (TERM (FACTOR 0) (TERM*))
     (EXPR* (+) (EXPR (TERM (FACTOR 7) (TERM*)) (EXPR*))))))))
(EXPR (TERM (FACTOR 4) (TERM* (*) (TERM (FACTOR 1) (TERM*)))) (EXPR*))
(EXPR (TERM (FACTOR 8) (TERM*)) (EXPR*))
(EXPR (TERM (FACTOR 3) (TERM*)) (EXPR*))
(EXPR (TERM (FACTOR 9) (TERM* (*) (TERM (FACTOR 0) (TERM*)))) (EXPR*))
(EXPR (TERM (FACTOR 5) (TERM* (*) (TERM (FACTOR 1) (TERM*))))
 (EXPR* (+)
  (EXPR
   (TERM (FACTOR 6)
    (TERM* (*) (TERM (FACTOR 3) (TERM* (*) (TERM (FACTOR 9) (TERM*))))))
   (EXPR* (+) (EXPR (TERM (FACTOR 5) (TERM*)) (EXPR*))))))
(EXPR
 (TERM (FACTOR 5)
  (TERM* (*) (TERM (FACTOR 1) (TERM* (*) (TERM (FACTOR 4) (TERM*))))))
 (EXPR* (+) (EXPR (TERM (FACTOR 5) (TERM*)) (EXPR*))))

*** 2.4
#+BEGIN_QUOTE
Exercise 2.4 [m] One way of describing combine-all is that it
calculates the cross-product of the function append on the argument
lists. Write the higher-order function cross-product, and define
combine-all in terms of it.
#+END_QUOTE
#+BEGIN_SRC lisp :results silent
  (defun cross-product (fn xs ys)
    (mappend #'(lambda (y)
                 (mapcar #'(lambda (x) (funcall fn x y)) xs))
             ys))

  (defun combine-all (xs ys)
    (cross-product #'append xs ys))
#+END_SRC
